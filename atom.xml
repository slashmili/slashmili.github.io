<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[/mili]]></title>
  <link href="http://slashmili.org/atom.xml" rel="self"/>
  <link href="http://slashmili.org/"/>
  <updated>2016-03-13T22:31:19+08:00</updated>
  <id>http://slashmili.org/</id>
  <author>
    <name><![CDATA[Milad Rastian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Error Handling, the Elixir Way]]></title>
    <link href="http://slashmili.org/blog/2016/03/11/error-handling-the-elixir-way/"/>
    <updated>2016-03-11T17:39:00+08:00</updated>
    <id>http://slashmili.org/blog/2016/03/11/error-handling-the-elixir-way</id>
    <content type="html"><![CDATA[<p>When you start learning Elixir, the first you&rsquo;ll learn is the culture of <code>let it crash</code>.
Which sounds great! It measn that you don&rsquo;t need to handle exceptions and the system heal itself
, it&rsquo;s to easy to fall in to trap of not catching any exception like I did.</p>

<!-- more -->


<p>After your application is ready to go live,
you&rsquo;ll understand that not every thing should crash. Consider this example from
<a href="https://github.com/slashmili/elide/">Elide</a> project and the <a href="https://github.com/slashmili/elide/pull/8">changes</a>
I&rsquo;ve made to handle exceptions.</p>

<p>Elide project is a url shortener service, that I&rsquo;m using to experiment with Elixir and Phoenix.
I&rsquo;m using <a href="https://hex.pm/packages/hashids">hashids</a> to generate the short urls and later when people
use short urls I use the same library to decode a short url to meaning full data that I have in the app,
all simple simple stuff. However while I was developing, I followed my own understanding of <code>let it crash</code>
which was to never handle any unexpected behaviour.</p>

<p>Consider simplified version of getting a short url entity:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Elide</span><span class="o">.</span><span class="no">ElinkServer</span>
</span><span class='line'>  <span class="n">alias</span> <span class="no">Elide</span><span class="o">.</span><span class="p">{</span><span class="no">Repo</span><span class="p">,</span> <span class="no">Elink</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">get_elink</span><span class="p">(</span><span class="n">slug</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">slug</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">by_slug</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="no">Repo</span><span class="o">.</span><span class="n">one</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">defp</span> <span class="n">by_slug</span><span class="p">(</span><span class="n">my_slug</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">elink_seq</span> <span class="o">=</span> <span class="n">get_details_by_slug</span><span class="p">(</span><span class="n">my_slug</span><span class="p">)</span>
</span><span class='line'>    <span class="n">from</span> <span class="n">e</span> <span class="ow">in</span> <span class="no">Elink</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">where:</span> <span class="n">e</span><span class="o">.</span><span class="n">elink_seq</span> <span class="o">==</span> <span class="o">^</span><span class="n">elink_seq</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">defp</span> <span class="n">get_details_by_slug</span><span class="p">(</span><span class="n">my_slug</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">s</span> <span class="o">=</span> <span class="no">Hashids</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">min_len:</span> <span class="m">1</span><span class="p">,</span> <span class="ss">salt:</span> <span class="n">salt</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">[</span><span class="n">elink_seq</span><span class="p">]}</span> <span class="o">=</span> <span class="no">Hashids</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">my_slug</span><span class="p">)</span>
</span><span class='line'>    <span class="n">elink_seq</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code looks simple and I thought if someone wants to open an invalid short url,
well I <code>let it crash</code>!</p>

<p>As soon as I had the project on the production server I noticed that:</p>

<ul>
<li>If any users enters an invalid short url, they&rsquo;ll face an ugly page with error <code>Server internal error</code></li>
<li>I am getting a lot of false alarms on <a href="http://honeybadger.io">honeybadger</a> from bots on the internet,
they don&rsquo;t care that I don&rsquo;t handle corner cases, they just hit the web server with invalid urls</li>
</ul>


<p>To be honest I knew I should handle this case and I postponed it.</p>

<p>So what are the options? How can I handle it in elixir in a decent way</p>

<ul>
<li>Returning nil on case of failure. Nah, I certainly don&rsquo;t like this one.
How can I know what was the error in the first place if I only return nil.</li>
<li>Using <code>try/catch</code>, yeah it does the job but doesn&rsquo;t look decent. Generally I don&rsquo;t like the codes that are guarded with exceptions.
If I don&rsquo;t have any option, sure but there should be a better way in Elixir and Erlang.</li>
<li>Returning a tuple of <code>{:ok, result}</code> in case of success and <code>{:error, reason}</code> in case of failure.
I&rsquo;ve seen this one I was using <a href="http://elixir-lang.org/docs/stable/elixir/File.html">File</a> module.
Looks like that is convention that people are following in Erlang and Elixir.</li>
</ul>


<p>The idea behind using using tuple as opposed to using <code>try/catch</code> is we shouldn&rsquo;t use errors as control flow
(<a href="http://elixir-lang.org/getting-started/try-catch-and-rescue.html">read more</a>).
If a short url doesn&rsquo;t exist in database because a bot requested a random url should be considered as
an invalid data and treated as invalid data. Let&rsquo;s how can we refactor this code to handle invalid data in Elixir way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Elide</span><span class="o">.</span><span class="no">ElinkServer</span>
</span><span class='line'>  <span class="n">alias</span> <span class="no">Elide</span><span class="o">.</span><span class="p">{</span><span class="no">Repo</span><span class="p">,</span> <span class="no">Elink</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">get_elink</span><span class="p">(</span><span class="n">slug</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">slug</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">by_slug</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">fetch_one</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">defp</span> <span class="n">fetch_one</span><span class="p">({</span><span class="ss">:error</span><span class="p">,</span> <span class="n">_</span><span class="p">}</span> <span class="o">=</span> <span class="n">error</span><span class="p">),</span> <span class="k">do</span><span class="p">:</span> <span class="n">error</span>
</span><span class='line'>  <span class="k">defp</span> <span class="n">fetch_one</span><span class="p">({</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">query</span><span class="p">})</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="no">Repo</span><span class="o">.</span><span class="n">one</span><span class="p">(</span><span class="n">query</span><span class="p">)}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">defp</span> <span class="n">by_slug</span><span class="p">(</span><span class="n">my_slug</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    case</span> <span class="n">get_details_by_slug</span><span class="p">(</span><span class="n">my_slug</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">      </span><span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="n">_</span><span class="p">}</span> <span class="o">=</span> <span class="n">error</span> <span class="o">-&gt;</span> <span class="n">error</span>
</span><span class='line'>      <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">elink_seq</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">from</span> <span class="n">e</span> <span class="ow">in</span> <span class="no">Elink</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">where:</span> <span class="n">e</span><span class="o">.</span><span class="n">elink_seq</span> <span class="o">==</span> <span class="o">^</span><span class="n">elink_seq</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">defp</span> <span class="n">get_details_by_slug</span><span class="p">(</span><span class="n">my_slug</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">s</span> <span class="o">=</span> <span class="no">Hashids</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">min_len:</span> <span class="m">1</span><span class="p">,</span> <span class="ss">salt:</span> <span class="n">salt</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="no">Hashids</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">my_slug</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">        </span><span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="p">[</span><span class="n">elink_seq</span><span class="p">]}</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">elink_seq</span><span class="p">}</span>
</span><span class='line'>        <span class="n">_</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="ss">:error</span><span class="p">,</span> <span class="ss">:failed_to_decode</span><span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Does it worth it? I believe so with this approach I can simply pattern match the return value and keep the <code>flow</code> going.
For example my controller would look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'>  <span class="k">def</span> <span class="n">go</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="err">%</span><span class="p">{</span><span class="s2">&quot;slug&quot;</span> <span class="o">=&gt;</span> <span class="n">slug</span><span class="p">})</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">slug</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="no">ElinkServer</span><span class="o">.</span><span class="n">get_elink</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">redirect_to_url</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">defp</span> <span class="n">redirect_to_url</span><span class="p">({</span><span class="ss">:error</span><span class="p">,</span> <span class="n">_</span><span class="p">},</span> <span class="n">conn</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">conn</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">put_status</span><span class="p">(</span><span class="m">404</span><span class="p">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">render</span><span class="p">(</span><span class="no">Elide</span><span class="o">.</span><span class="no">ErrorView</span><span class="p">,</span> <span class="s2">&quot;404.html&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">halt</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">defp</span> <span class="n">redirect_to_url</span><span class="p">({</span><span class="ss">:ok</span><span class="p">,</span> <span class="n">elink</span><span class="p">},</span> <span class="n">conn</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="n">url</span> <span class="o">=</span> <span class="n">elink</span><span class="o">.</span><span class="n">urls</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">shuffle</span> <span class="o">|&gt;</span> <span class="no">List</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>    <span class="n">conn</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">inc_stat</span><span class="p">(</span><span class="n">elink</span><span class="p">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">redirect</span><span class="p">(</span><span class="ss">external:</span> <span class="n">url</span><span class="o">.</span><span class="n">link</span><span class="p">)</span>
</span><span class='line'>    <span class="o">|&gt;</span> <span class="n">halt</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I could have just used <code>try/catch</code> in <code>go</code> function and call it done but I certainly like this code much better!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir]]></title>
    <link href="http://slashmili.org/blog/2016/02/06/elixir/"/>
    <updated>2016-02-06T09:33:00+08:00</updated>
    <id>http://slashmili.org/blog/2016/02/06/elixir</id>
    <content type="html"><![CDATA[<p>It was almost a year ago that I got introduced to <a href="http://elixir-lang.org">Elixir</a>.
I remember my first impression was yet another language on top of another one.
In addition running a software on <a href="http://www.erlang.org/">Erlang/OTP</a>, it&rsquo;s totally different beast
and I was a bit skeptical about it. However I gave it a chance and after a year,
I&rsquo;m totally happy with the time I spend and
I believe that everyone should take advantage of the language and the platform that is running on.</p>

<!-- more -->


<h2>Why Elixir?</h2>

<h3>Eloquent &amp; Expressive</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">urls</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;http://google.com&quot;</span><span class="p">,</span> <span class="s2">&quot;http://trello.com&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">random_url</span> <span class="o">=</span> <span class="n">urls</span> <span class="o">|&gt;</span> <span class="no">Enum</span><span class="o">.</span><span class="n">shuffle</span> <span class="o">|&gt;</span> <span class="no">List</span><span class="o">.</span><span class="n">first</span>
</span></code></pre></td></tr></table></div></figure>


<p>Do I need to explain the code? Don&rsquo;t think so!
And if you have a bit of unix background this code should make sense to you.</p>

<blockquote><p><small>Yes, there is an easy way to get random item, the above code is just for making the point.</small></p></blockquote>

<p>BTW did I tell you Elixir is a functional programming language?
If you are not familiar with functional programming, it might take sometime to get to use
to that, after you un-learn your OOP skills, you&rsquo;ll find that every thing make sense in Elixir land.</p>

<h3>Mature Environment</h3>

<p>Elixir comes with tools that help you to develop and build your project:</p>

<ul>
<li><a href="http://elixir-lang.org/docs/stable/mix/Mix.html">Mix</a> is a build tool to run your tasks.</li>
<li><a href="https://hex.pm/">Hex</a> is a package manager that is done right.</li>
<li><a href="http://elixir-lang.org/docs/stable/ex_unit/ExUnit.html">ExUnit</a> is your unit testing framework.</li>
<li><a href="https://github.com/elixir-lang/ex_doc">ExDoc</a> generates documentation for your Elixir projects.</li>
</ul>


<p>Also Elixir runs on <a href="https://www.erlang.org/">Erlang Virtual Machine(BEAM)</a> which has been <a href="https://www.quora.com/Which-companies-use-the-Erlang-language">around us</a> for quite some time.</p>

<h3>Metaprogramming</h3>

<p>Whenever I&rsquo;m learning a new language, after I get enough familiar with the language and it&rsquo;s syntax the first thing
I&rsquo;m looking for is how can I write a code that writes code for me!</p>

<p>The way that elixir does that is quite interesting.
Elixir&rsquo;s <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">AST</a> can be represented by Elixir&rsquo;s own data
structures. Having the AST accessible by normal Elixir code lets you do very powerful
things because you can operate at the level typically reserved only for compilers and language designers.</p>

<p>Let&rsquo;s say you want to humanize a mathematical equation, the interface and output should be like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span> <span class="o">&gt;</span> <span class="no">Math</span><span class="o">.</span><span class="n">say</span> <span class="m">1</span> <span class="o">+</span> <span class="m">2</span>
</span><span class='line'><span class="m">1</span> <span class="n">plus</span> <span class="m">2</span> <span class="n">is</span> <span class="m">3</span>
</span><span class='line'><span class="m">3</span>
</span><span class='line'><span class="n">iex</span> <span class="o">&gt;</span> <span class="no">Math</span><span class="o">.</span><span class="n">say</span> <span class="m">5</span> <span class="o">+</span> <span class="m">7</span>
</span><span class='line'><span class="m">5</span> <span class="n">plus</span> <span class="m">7</span> <span class="n">is</span> <span class="m">12</span>
</span><span class='line'><span class="m">12</span>
</span></code></pre></td></tr></table></div></figure>


<p>To achieve that we need to write a <code>macro</code> that matches with AST of <code>1 + 2</code>.
Thanks to Elixir&rsquo;s <code>quote</code> function it&rsquo;s easy to find out how it looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span> <span class="o">&gt;</span> <span class="kn">quote</span> <span class="k">do</span><span class="p">:</span> <span class="m">1</span> <span class="o">+</span> <span class="m">2</span>
</span><span class='line'><span class="p">{</span><span class="ss">:+</span><span class="p">,</span> <span class="p">[</span><span class="ss">context:</span> <span class="no">Elixir</span><span class="p">,</span> <span class="kn">import</span><span class="p">:</span> <span class="no">Kernel</span><span class="p">],</span> <span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we know how <code>1 + 2</code> is represented in Elixir&rsquo;s format we can write a <code>defmacro</code> that
matches with that data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="k">defmodule</span> <span class="no">Math</span> <span class="k">do</span>
</span><span class='line'><span class="k">  defmacro</span> <span class="n">say</span><span class="p">({</span><span class="ss">:+</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="p">[</span><span class="n">lhs</span><span class="p">,</span> <span class="n">rhs</span><span class="p">]})</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="kn">quote</span> <span class="k">do</span>
</span><span class='line'><span class="k">      </span><span class="n">lhs</span> <span class="o">=</span> <span class="kn">unquote</span> <span class="n">lhs</span>
</span><span class='line'>      <span class="n">rhs</span> <span class="o">=</span> <span class="kn">unquote</span> <span class="n">rhs</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">lhs</span> <span class="o">+</span> <span class="n">rhs</span>
</span><span class='line'>      <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">lhs</span><span class="si">}</span><span class="s2"> plus </span><span class="si">#{</span><span class="n">rhs</span><span class="si">}</span><span class="s2"> is </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">result</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can read more about macros in
<a href="https://pragprog.com/book/cmelixir/metaprogramming-elixir">Metaprogramming Elixir</a> book.</p>

<blockquote><p><small>this example is from the same book</small></p></blockquote>

<p>I have to mention that
<a href="http://elixir-lang.org/docs/master/elixir/Kernel.html#if/2">if</a> and most of the Elixir&rsquo;s keywords
are implemented as a <code>macro</code>.</p>

<h3>Concurrent</h3>

<p>Having a concurrent system in Elixir is inevitable. In addition because the data
are immutable you don&rsquo;t need to worry about concurrent processes stepping on each others toes.
Elixir achieves that by running on top of BEAM.</p>

<p>How does it work? Let&rsquo;s say you want run a few queries and send the results back to the user</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span> <span class="o">&gt;</span> <span class="n">run_query</span> <span class="o">=</span> <span class="k">fn</span> <span class="p">(</span><span class="n">query</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="m">1000</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="ss">:random</span><span class="o">.</span><span class="n">uniform</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="ss">:timer</span><span class="o">.</span><span class="n">sleep</span>
</span><span class='line'>  <span class="no">IO</span><span class="o">.</span><span class="n">inspect</span> <span class="s2">&quot;query </span><span class="si">#{</span><span class="n">query</span><span class="si">}</span><span class="s2"> executed&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><small> Not all the queries finish in the same time, to simulate that we sleep random amount of time</small></p></blockquote>

<p>It would be nice to run independent queries concurrently, let&rsquo;s try it in <code>iex</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span> <span class="o">&gt;</span> <span class="n">spawn</span><span class="p">(</span><span class="k">fn</span> <span class="o">-&gt;</span> <span class="n">run_query</span><span class="o">.</span><span class="p">(</span><span class="s1">&#39;select * from users&#39;</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span>
</span><span class='line'><span class="c1">#PID&lt;0.132.0&gt;</span>
</span><span class='line'><span class="n">iex</span> <span class="o">&gt;</span> <span class="n">spawn</span><span class="p">(</span><span class="k">fn</span> <span class="o">-&gt;</span> <span class="n">run_query</span><span class="o">.</span><span class="p">(</span><span class="s1">&#39;select * from reports&#39;</span><span class="p">)</span> <span class="k">end</span><span class="p">)</span>
</span><span class='line'><span class="c1">#PID&lt;0.134.0&gt;</span>
</span><span class='line'><span class="s2">&quot;query select * from users executed&quot;</span>
</span><span class='line'><span class="s2">&quot;query select * from reports executed&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see both queries executed concurrently.</p>

<p>You might ask how can I get back the results and use them in the main process? The answer is <em>Message Passing</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span> <span class="o">&gt;</span> <span class="n">caller</span> <span class="o">=</span> <span class="n">self</span>
</span><span class='line'><span class="n">iex</span> <span class="o">&gt;</span> <span class="n">spawn</span><span class="p">(</span><span class="k">fn</span> <span class="o">-&gt;</span> <span class="n">send</span><span class="p">(</span><span class="n">caller</span><span class="p">,</span> <span class="p">{</span><span class="ss">:query_result</span><span class="p">,</span> <span class="n">run_query</span><span class="o">.</span><span class="p">(</span><span class="s1">&#39;select * from reports&#39;</span><span class="p">)})</span> <span class="k">end</span><span class="p">)</span>
</span><span class='line'><span class="c1">#PID&lt;0.138.0&gt;</span>
</span><span class='line'><span class="s2">&quot;query select * from reports executed&quot;</span>
</span><span class='line'><span class="n">iex</span> <span class="o">&gt;</span> <span class="k">receive</span> <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="p">{</span><span class="ss">:query_result</span><span class="p">,</span> <span class="n">result</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="no">IO</span><span class="o">.</span><span class="n">inspect</span> <span class="s2">&quot;result is </span><span class="si">#{</span><span class="n">result</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="s2">&quot;result is query select * from reports executed&quot;</span>
</span><span class='line'><span class="s2">&quot;result is query select * from reports executed&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The processes in Elixir(it&rsquo;s not same as unix processes) can talk to each other through message.
Each process has it&rsquo;s own mailbox and can process one item at a time.</p>

<h3>Distributed</h3>

<p>I save the best for last.</p>

<p>Erlang and its BEAM was implemented to be run in distributed environment.
You can easily connect two Erlang nodes together:</p>

<p>Node1:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="err">$</span> <span class="n">iex</span> <span class="o">--</span><span class="n">sname</span> <span class="n">node1</span>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="n">node1</span><span class="nv">@localhost</span><span class="p">)</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Node2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="err">$</span> <span class="n">iex</span> <span class="o">--</span><span class="n">sname</span> <span class="n">node2</span>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="n">node2</span><span class="nv">@localhost</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Node</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="ss">:&quot;node1@localhost&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">iex</span><span class="p">(</span><span class="n">node2</span><span class="nv">@localhost</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Node</span><span class="o">.</span><span class="n">list</span>
</span><span class='line'><span class="p">[</span><span class="ss">:&quot;node1@localhost&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>After the nodes recognize each other,
you can run any piece of code in any node in the cluster.</p>

<p>Node2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">iex</span><span class="p">(</span><span class="n">node2</span><span class="nv">@localhost</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Node</span><span class="o">.</span><span class="n">spawn</span><span class="p">(</span>
</span><span class='line'>  <span class="ss">:&quot;node1@localhost&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="k">fn</span> <span class="o">-&gt;</span> <span class="no">IO</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;This code ran from </span><span class="si">#{</span><span class="n">node</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">end</span><span class="p">)</span>
</span><span class='line'><span class="no">This</span> <span class="n">code</span> <span class="n">ran</span> <span class="n">from</span> <span class="n">node1</span><span class="nv">@localhost</span>
</span><span class='line'><span class="c1">#PID&lt;8771.79.0&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It looks simple, isn&rsquo;t it? To be fair, building distributed application requires
more thought but hey at least the language and its environment are in your side!</p>

<h2>My experience</h2>

<p>Well I said why I like Elixir but learning a new language is challenging and it&rsquo;s get
more complicated if it&rsquo;s running under different environment(Erlang/OTP).</p>

<ul>
<li>I did struggle with the idea of immutable data but after a while I got use to that.</li>
<li>Elixir has a few Hash/List like data structures and few times I got confused to choose between them. It&rsquo;s getting better since Elixir is depreciating <code>HashDict</code>.</li>
<li>Building a concurrent, fault-tolerant system under BEAM requires knowledge about OTP framework(<a href="https://www.manning.com/books/elixir-in-action">Elixir in Action</a> can help you a lot).</li>
<li>Even though Elixir code runs under the VM, the development cycle is fast! Mix and Hex are doing great job, the dependencies are downloaded and compiled very fast. I can fire up <code>iex</code> console or run <code>mix test</code> and quickly get the result back.</li>
</ul>


<h2>Where to start</h2>

<p>Are you interested? Spending most of my time reading Elixir/Erlang related book I can give you some suggestions</p>

<ul>
<li><a href="https://pragprog.com/book/elixir12/programming-elixir-1-2">Programming Elixir</a>
This book helps you to get familiar with the language and master it.</li>
<li><a href="https://www.manning.com/books/elixir-in-action">Elixir in Action</a>
You&rsquo;ve read <em>Programming Elixir</em> but still have lot of questions about using OTP? This book is for you.</li>
<li><a href="https://pragprog.com/book/phoenix/programming-phoenix">Programming Phoenix</a>
Are you ready to write your first app in Elixir? If it&rsquo;s a web app you can use Phoenix.</li>
<li><a href="https://pragprog.com/book/cmelixir/metaprogramming-elixir">Metaprogramming Elixir</a>
You&rsquo;ve built your first app in Phoenix but wondering how Phoenix does all of those tricks? It&rsquo;s time to level up and become master in Elixir Metaprogramming by reading this book.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find and Replace Regex Group Match in VIM]]></title>
    <link href="http://slashmili.org/blog/2014/12/07/find-and-replace-regex-group-match-in-vim/"/>
    <updated>2014-12-07T01:57:00+08:00</updated>
    <id>http://slashmili.org/blog/2014/12/07/find-and-replace-regex-group-match-in-vim</id>
    <content type="html"><![CDATA[<h1>Intro</h1>

<p>Regular expression is a special text string for describing a search pattern and since VIM is a full-fledged editor you can use a regex string to find what you&rsquo;re looking for in a file.</p>

<p>If you are a VIM user you might already know that, same goes here! Until few days back I needed to do more than a usual search in my file.</p>

<p>I received a file with this content:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1-2-13,3700,26840,0,mt,0,EUR,0,USD
</span><span class='line'>10-21-13,3700,26807,0,mt,0,EUR,0,USD
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>And I had to import into a table in database. I found a way to import CSV file to the database but after I imported all the records I noticed that the date column was wrong in the database. As you can see in the first column, date format isn&rsquo;t what usually databases accept, the format should be like &lsquo;2013-1-2&rsquo;. Well I had two ways to fix the problem, either write a small script to fix the date or use VIM&rsquo;s search and replace feature to fix the problem.</p>

<!-- more -->


<h2>Search a Regex string in VIM</h2>

<p>The regex was simple it can be used in VIM&rsquo;s search like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\d\{1,2\}-\d\{1,2\}-\d\d</span></code></pre></td></tr></table></div></figure>


<blockquote><p>In order to search in VIM, you need to go to Normal mode(press escape) and press / and start typing to find your match</p></blockquote>

<p>The month and day length might be one or two, that&rsquo;s we why have \d\{1,2\} to make sure it matches with both cases. The first surprise that I had was this weird backslash before curly brackets. If you are familiar with regex, you don&rsquo;t need to escape the curlys!</p>

<h2>Replace matched Regex in VIM</h2>

<p>So far we managed to match the date string but how can we reuse our matched string and change the order? The answer is Grouping feature in regex. All we need to do is put the part that we want to group in parentheses and then use it. What does it mean?! Let&rsquo;s try it out:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\(\d\{1,2\}\)-\(\d\{1,2\}\)-\(\d\d\)</span></code></pre></td></tr></table></div></figure>


<p>This thing might be bit scary but if you take look closer, I just added parentheses around month, day and year regex.</p>

<p>To reuses the matched string and replace it with the correct order you can use VIM&rsquo;s replace feature:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>%s//21\3-\1-\2/g</span></code></pre></td></tr></table></div></figure>


<blockquote><p>In order to replace a string in VIM, you need to go to Normal mode(press escape) and press : and start typing the above command</p></blockquote>

<p>By this replace command we replace the date with 21(third match group)&ndash;(first match group)&ndash;(second match group).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dependency Manager for PHP]]></title>
    <link href="http://slashmili.org/blog/2014/11/23/dependency-manager-for-php/"/>
    <updated>2014-11-23T20:14:00+08:00</updated>
    <id>http://slashmili.org/blog/2014/11/23/dependency-manager-for-php</id>
    <content type="html"><![CDATA[<h2>What is dependency manager?</h2>

<p>Let&rsquo;s say in your application you need to send a tweet from your Twitter account, what would you do? There are a many <a href="https://dev.twitter.com/overview/api/twitter-libraries#php">PHP Twitter client</a> out there.</p>

<p>The quick way is just download one of them and put all the files in your application root. Well not a smart choice! You are adding someone code to your code base you need to maintain it, update it and so forth. What if there is a way that you say I want Library XYZ in my project version 2.0 and everything would be ready magically!</p>

<p>Say welcome to <a href="https://getcomposer.org/">Composer</a>.</p>

<!-- more -->


<h2>What is composer?</h2>

<p>Composer is a tool that helps you to manage your PHP project dependency and setup and install PHP library that other developers shared in <a href="https://packagist.org/">https://packagist.org/</a></p>

<h2>How to use it</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -sS https://getcomposer.org/installer | php</span></code></pre></td></tr></table></div></figure>


<p>And let&rsquo;s say I pick <a href="https://packagist.org/packages/jublonet/codebird-php">codebird-php</a> to talk to Twitter API. I&rsquo;d go to the <a href="https://packagist.org/packages/jublonet/codebird-php">library&rsquo;s page in packagist</a> and check the available version. Right now version <em>2.6.0</em> is the latest. I create a file named <em>composer.json</em> in my root of project:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "require": {
</span><span class='line'>        "jublonet/codebird-php": "2.6.0"
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ php composer.phar install
</span><span class='line'>Loading composer repositories with package information
</span><span class='line'>Installing dependencies (including require-dev)
</span><span class='line'>  - Installing composer/installers (v1.0.18)
</span><span class='line'>    Downloading: 100%
</span><span class='line'>
</span><span class='line'>  - Installing jublonet/codebird-php (2.6.0)
</span><span class='line'>    Downloading: 100%
</span><span class='line'>
</span><span class='line'>Writing lock file
</span><span class='line'>Generating autoload files</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it! If you look at the directory that composer.json is saved, you&rsquo;ll find out that a new file <em>composer.lock</em> and a new directory <em>vendor</em> are created after you ran the above command.</p>

<p>To use the new library you need to include <em>vendor/autoload.php</em> to your PHP files:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//app.php
</span><span class='line'>require_once __DIR__ . '/vendor/autoload.php'
</span><span class='line'>$cb = Codebird\Codebird::getInstance();
</span><span class='line'>
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>As you can see you don&rsquo;t need to worry about place that the library is downloaded all you need to do is just include <em>vendor/autoload.php</em> and use the libraries in your application.</p>

<h2>Should I use it?</h2>

<p>Definitely! Tools for managing dependencies are de facto in writing and building modern applications.</p>

<p>Other languages Like Perl, Python, Ruby, Java, JavaScript they all have their own tools to manage dependencies for their program and it&rsquo;s proven that improves productivity and helps to build reusable software.</p>

<h2>What&rsquo;s next?</h2>

<p>Composer is a powerful tool and it&rsquo;s easy to mix up the idea and miss use. In the next post I&rsquo;ll talk about the best practices in using composer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Application Crash in Linux]]></title>
    <link href="http://slashmili.org/blog/2014/06/16/debugging-application-crash-in-linux/"/>
    <updated>2014-06-16T06:56:00+08:00</updated>
    <id>http://slashmili.org/blog/2014/06/16/debugging-application-crash-in-linux</id>
    <content type="html"><![CDATA[<p>Recently we had an issue with <a href="http://www.rsyslog.com/">rsyslog</a> daemon, now and then it was crashing and the only way to debug such an application (especially if it&rsquo;s not something developed by your team) is using <a href="http://en.wikipedia.org/wiki/Core_dump">core dump</a>. It&rsquo;s not kind of task that you do every day and it took me a while to search and remember how did it last time.</p>

<h2>Enable Core Dump</h2>

<p>The first is step is to enable the Core Dump, It&rsquo;s pretty simple. Follow <a href="http://www.unixmen.com/how-to-enable-core-dumps-in-rhel6/">this guide</a> and you can enable it in no time.</p>

<blockquote><p>The core dump only will be generated for those process that started after the above changes. Don&rsquo;t forget to restart the daemon or application you have problem with.</p></blockquote>

<!-- more -->


<h2>Wait for the next crash!</h2>

<p>Make coffee and enjoy the life and be prepared for the next crash :)</p>

<blockquote><p>We are using <a href="http://zenoss.org">Zenoss</a>, it&rsquo;s monitoring the important services like apache, rsyslog and etc. If the process is not running we get an SMS right away.</p></blockquote>

<h2>Install debugging packages</h2>

<p>Make sure you have <strong>gdb</strong> package installed.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install gdb</span></code></pre></td></tr></table></div></figure>


<p>GDB is <a href="http://en.wikipedia.org/wiki/GNU_Debugger">GNU Debugger</a> is the standard debugger for the GNU operating system.</p>

<p>If you are using Centos during the debugging you might see some messages like</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Reading symbols from /lib64/libc.so.6...(no debugging symbols found)...done.
</span><span class='line'>Loaded symbols for /lib64/libc.so.6</span></code></pre></td></tr></table></div></figure>


<p>In order to be able to debug and see the full stacktrace you need to install <code>yum-utils</code>. Then you need to install the debugging packages for the application with <code>debuginfo-install</code>. It installs headers and debugging tools that are required to debug rsyslog daemon.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install yum-utils
</span><span class='line'>debuginfo-install  rsyslog-5.8.10-8.el6.x86_64</span></code></pre></td></tr></table></div></figure>


<h2>Read the Core dump</h2>

<p>What you are going to get out of this core dump is <a href="http://en.wikipedia.org/wiki/Stack_trace">stacktrace</a> of application and the exact line of code that caused this failure which requires some programming skills. . I&rsquo;m going to explain how did I debug and read the stacktrace for rsyslog but you can follow the same steps to do it for any other application.</p>

<ul>
<li>Run <code>gdb</code> for the core dump</li>
</ul>


<p>You need to run the following command to start the <code>gdb</code> for that specific core dump.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb /sbin/rsyslogd /tmp/core-rs-action-que-6-0-0-28309-1402524331
</span><span class='line'>GNU gdb (GDB) Red Hat Enterprise Linux (7.2-60.el6_4.1)
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>Core was generated by `/sbin/rsyslogd -i /var/run/syslogd.pid -c 5'.
</span><span class='line'>Program terminated with signal 6, Aborted.
</span><span class='line'> 0x00007fea37ff0925 in raise (sig=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:64
</span><span class='line'>64  return INLINE_SYSCALL (tgkill, 3, pid, selftid, sig);
</span><span class='line'>(gdb)</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Based on my configuration the core dump saved under <code>/tmp/core-rs-action-que-6-0-0-28309-1402524331</code>.</p></blockquote>

<ul>
<li>Now gdb prompt is ready for a command.</li>
</ul>


<blockquote><p>If you are new to gdb give yourself a faviour and check this <a href="http://www.cprogramming.com/gdb.html">gdb crash course</a></p></blockquote>

<p>The First command that I usally run especially in this suiation is <strong>where</strong>. It spits out the stacktrace and the line of code which was running when the crash happend.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) where
</span><span class='line'> #0  0x00007fea37ff0925 in raise (sig=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:64
</span><span class='line'> #1  0x00007fea37ff2105 in abort () at abort.c:92
</span><span class='line'> #2  0x00007fea38fece17 in sigsegvHdlr (signum=6) at debug.c:830
</span><span class='line'> #3  &lt;signal handler called>
</span><span class='line'> #4  0x00007fea37ff0925 in raise (sig=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:64
</span><span class='line'> #5  0x00007fea37ff2105 in abort () at abort.c:92
</span><span class='line'> #6  0x00007fea3802e837 in __ libc _ message (do_abort=2, fmt=0x7fea38116ac0 "*** glibc detected *** %s: %s: 0x%s ***\n")
</span><span class='line'>    at ../sysdeps/unix/sysv/linux/libc_fatal.c:198
</span><span class='line'>    #7  0x00007fea38034166 in malloc_printerr (action=3, str=0x7fea38114bdc "invalid fastbin entry (free)", ptr=&lt;value optimized out>)
</span><span class='line'>        at malloc.c:6332
</span><span class='line'>        #8  0x00007fea38ffadf9 in qDelLinkedList (pThis=&lt;value optimized out>) at queue.c:586
</span><span class='line'>        #9  0x00007fea38ffb95c in DoDeleteBatchFromQStore (pThis=0x7fea398d9da0, nElem=1) at queue.c:1340
</span><span class='line'>        #10 0x00007fea38ffe40d in DeleteBatchFromQStore (pThis=0x7fea398d9da0, pWti=&lt;value optimized out>) at queue.c:1368
</span><span class='line'>        #11 DeleteProcessedBatch (pThis=0x7fea398d9da0, pWti=&lt;value optimized out>) at queue.c:1428
</span><span class='line'>        #12 DequeueConsumableElements (pThis=0x7fea398d9da0, pWti=&lt;value optimized out>) at queue.c:1457
</span><span class='line'>        #13 DequeueConsumable (pThis=0x7fea398d9da0, pWti=&lt;value optimized out>) at queue.c:1505
</span><span class='line'>        #14 0x00007fea38ffe603 in DequeueForConsumer (pThis=&lt;value optimized out>, pWti=&lt;value optimized out>) at queue.c:1642
</span><span class='line'>        #15 ConsumerReg (pThis=&lt;value optimized out>, pWti=&lt;value optimized out>) at queue.c:1696
</span><span class='line'>        #16 0x00007fea38ff7126 in wtiWorker (pThis=0x7fea398da220) at wti.c:313
</span><span class='line'>        #17 0x00007fea38ff6c1a in wtpWorker (arg=0x7fea398da220) at wtp.c:387
</span><span class='line'>        #18 0x00007fea3897b9d1 in start_thread (arg=0x7fea17fff700) at pthread_create.c:301
</span><span class='line'>        #19 0x00007fea380a6b6d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:115
</span><span class='line'>        (gdb)</span></code></pre></td></tr></table></div></figure>


<p>What I can read from this output is the program crashed in queue.c in function qDelLinkedList at line 586. My gut feeling is it has something to do with memory allocation. In order to follow up more deeply I had to find the right source code that matches with my application. We found out that the application crashed on calling <strong>free</strong> system call over a variable. That looks like a dead end to me! Fortunately there was a new package of <strong>libc</strong> available on Centos, we upgraded it and so for everything works smoothly.</p>

<blockquote><p>These steps are just a starting point for debugging a crash. I wish you a wonderful journey!</p></blockquote>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unleash the Daemons]]></title>
    <link href="http://slashmili.org/blog/2013/11/17/unleash-the-daemons/"/>
    <updated>2013-11-17T22:43:00+08:00</updated>
    <id>http://slashmili.org/blog/2013/11/17/unleash-the-daemons</id>
    <content type="html"><![CDATA[<p>I gave a talk at <a href="https://github.com/klxrb">KL Ruby Brigade</a> monthly meeting about Daemons in Unix environment.</p>

<p>If you want to know what the Daemon is, here is a quick explanation:</p>

<blockquote><p>In multitasking computer operating systems, a daemon (/ˈdeɪmən/ or /ˈdiːmən/) is a computer program that runs as a background process, rather than being under the direct control of an interactive user <a href="http://en.wikipedia.org/wiki/Daemon_%28computing%29">Wikipedia</a></p></blockquote>

<p>You may find my presentation here:</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/27922954 "  height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitor Your App's Behaviour]]></title>
    <link href="http://slashmili.org/blog/2013/08/11/monitor-your-apps-behaviour/"/>
    <updated>2013-08-11T00:00:00+08:00</updated>
    <id>http://slashmili.org/blog/2013/08/11/monitor-your-apps-behaviour</id>
    <content type="html"><![CDATA[<div class='post'>
<div dir="ltr" style="text-align: left;" trbidi="on"><div style="color: #444444; font-family: 'Helvetica Neue', HelveticaNeue, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 19px;">I had a talk&nbsp;at&nbsp;<a data-mce-href="https://www.facebook.com/groups/klxrb/" href="https://www.facebook.com/groups/klxrb/" style="color: #444444;">KL Ruby Brigade</a>&nbsp;about Monitoring App&#8217;s behaviour. You can find the&nbsp;presentation in&nbsp;<a data-mce-href="https://docs.google.com/presentation/d/1nsEUW9s5_YoxXWgrwl3mvmIdkhWamYlIwADfKfJEpkc/edit?usp=sharing" href="https://docs.google.com/presentation/d/1nsEUW9s5_YoxXWgrwl3mvmIdkhWamYlIwADfKfJEpkc/edit?usp=sharing" style="color: #444444;">here</a>&nbsp;or flip it here:</div><div style="color: #444444; font-family: 'Helvetica Neue', HelveticaNeue, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 19px;"><iframe allowfullscreen="" frameborder="0" height="356" marginheight="0" marginwidth="0" mozallowfullscreen="" scrolling="no" src="http://www.slideshare.net/slideshow/embed_code/25139283" style="border-width: 1px 1px 0; border: 1px solid #CCC; margin-bottom: 5px; max-width: 427px;" webkitallowfullscreen="" width="100%"> </iframe> <br /><div style="margin-bottom: 5px;"><strong> <a href="http://www.slideshare.net/miladrastian/monitor-your-apps-behaviour-25139283" target="_blank" title="Monitor your app&amp;#39;s behaviour">Monitor your app&amp;#39;s behaviour</a> </strong> from <strong><a href="http://www.slideshare.net/miladrastian" target="_blank">Milad Rastian</a></strong> <br /><br /></div></div><div style="color: #444444; font-family: 'Helvetica Neue', HelveticaNeue, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 19px;">My talk was mainly about why and how you can monitor your app&#8217;s behaviour through monitoring systems like&nbsp;<a data-mce-href="http://www.zenoss.org/" href="http://www.zenoss.org/" style="color: #444444;">Zenoss</a>&nbsp;and&nbsp;<a data-mce-href="https://github.com/etsy/statsd/" href="https://github.com/etsy/statsd/" style="color: #444444;">Statsd</a>&nbsp;&amp;&nbsp;<a data-mce-href="http://graphite.wikidot.com/" href="http://graphite.wikidot.com/" style="color: #444444;">Graphite</a>.</div><div style="color: #444444; font-family: 'Helvetica Neue', HelveticaNeue, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 19px;"><br /></div><div style="color: #444444; font-family: 'Helvetica Neue', HelveticaNeue, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 19px;"><br /></div></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Online Course With Coursera]]></title>
    <link href="http://slashmili.org/blog/2012/03/16/online-course-with-coursera/"/>
    <updated>2012-03-16T00:00:00+08:00</updated>
    <id>http://slashmili.org/blog/2012/03/16/online-course-with-coursera</id>
    <content type="html"><![CDATA[<div class='post'>
<div class='posterous_autopost'><p><a href="https://www.coursera.org/">Coursera</a> is online education center, it&#8217;s aim is to bring education for free to any person who is seeking for that.</p>  <p>I enrolled for three courses but I&#8217;ve only managed to attend one of them since 1 week ago that I registered.&nbsp;</p>  <p><strong>Software as a Service</strong> course is really great course for person who wants to learn <a href="http://en.wikipedia.org/wiki/Software_as_a_service">SaaS</a>,&nbsp;<a href="http://www.ruby-lang.org/en/" title="Ruby">Ruby</a>&nbsp;and <a href="http://rubyonrails.org/">Rails</a> and beside that you have fun class. Even though is so soon to judge about Rails but I&#8217;ve already missed <a href="https://www.djangoproject.com/">Django</a>.</p>  <p>I like their teaching method, you follow&nbsp;lectures and do homework related to the lectures, and they give you a score for you works(apparently your submitted files is runed with unittest and each test has score). I&#8217;ve already learnt a lot about Ruby just with following course and doing homework.</p>  <p>After all don&#8217;t miss.</p></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitor Zenoss With Chrome's Plugin]]></title>
    <link href="http://slashmili.org/blog/2012/03/16/monitor-zenoss-with-chrome-plugin/"/>
    <updated>2012-03-16T00:00:00+08:00</updated>
    <id>http://slashmili.org/blog/2012/03/16/monitor-zenoss-with-chrome-plugin</id>
    <content type="html"><![CDATA[<div class='post'>
<div class='posterous_autopost'><p>As currently my life is kind of stuck into Zenoss, I made another tools for Zenoss.</p>  <p>This time, it&#8217;s a Google Chrome&#8217;s plugin, I can say it&#8217;s more useful than <a href="https://play.google.com/store/apps/details?id=com.github.slashmili.Zendroid">Zenroid</a>, because you can watch out server&#8217;s alarm while you are browsing the web.</p>  <p>You can get source from <a href="https://github.com/slashmili/zenchor">zenchor</a>&nbsp;repo and install it from <a href="https://chrome.google.com/webstore/detail/hibkfafceeekmknadpglakdnmaiigonp?utm_source=chrome-ntp-icon">Chrome Web Store</a>.</p></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configure and Manage Your Servers in a FLASH]]></title>
    <link href="http://slashmili.org/blog/2012/02/03/configure-and-manage-your-servers-in/"/>
    <updated>2012-02-03T00:00:00+08:00</updated>
    <id>http://slashmili.org/blog/2012/02/03/configure-and-manage-your-servers-in</id>
    <content type="html"><![CDATA[<div class='post'>
<div class='posterous_autopost'><p>About a 3 months ago I had a speech in <a href="http://webcamp.my/">Webcamp KL Group</a> about <a href="http://puppetlabs.com/">Puppet</a></p>  <p>You can get the voice from <a href="http://webcamp.my/2011/11/milad-rastian-configure-and-manage-your-servers-in-a-flash-with-puppet/">here</a>&nbsp;and watch the presntation from here :</p>  <p style="text-align: center;"><iframe src="https://docs.google.com/present/embed?id=dfk6jgws_2dh2r4xf7" frameborder="0" height="342" width="410"></iframe></p></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zendroid - Android Application to Monitor Zenoss's Events]]></title>
    <link href="http://slashmili.org/blog/2011/07/03/zendroid-android-application-to-monitor/"/>
    <updated>2011-07-03T00:00:00+08:00</updated>
    <id>http://slashmili.org/blog/2011/07/03/zendroid-android-application-to-monitor</id>
    <content type="html"><![CDATA[<p>I released an Android Application which you can monitor your Zenoss events right in your Android</p>

<p><img src="http://slashmili.org/images/posts/2011-07-03-zendroid-android-application-to-monitor.png" alt="Zendroid" /></p>

<p>You may install it from <a href="http://goo.gl/RU1Pk">Android Market2</a>. Codes are available in <a href="https://github.com/slashmili/Zendroid">GitHub repo2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Problem With PostgreSQL ODBC ZenPack]]></title>
    <link href="http://slashmili.org/blog/2011/07/03/problem-with-postgresql-odbc-zenpack/"/>
    <updated>2011-07-03T00:00:00+08:00</updated>
    <id>http://slashmili.org/blog/2011/07/03/problem-with-postgresql-odbc-zenpack</id>
    <content type="html"><![CDATA[<div class='post'>
<div class="posterous_autopost"><p>In my new job(if after 8 months you can count it as new!) I am responsible to maintain <a href="http://zenoss.org/" target="_blank">Zenoss</a> and some week I am on call for Zenoss&#8217;s Alarm.</p>  <p>One of the strangest problem that we had was about <a href="http://community.zenoss.org/docs/DOC-3497">PostgreSQL ODBC Database Monitor</a> package. suddenly zenperfsql stopped without any log.</p>  <p>I tried to run zenperfsql in debug mode and I hoped that I would fix the problem. but after the daemon died again the error that I saw was : </p>  <p><code>python: pthread_mutex_lock.c:62: __pthread_mutex_lock: Assertion `mutex-&gt;__data.__owner == 0' failed.</code></p>  <p>I never thought that I would face to python&#8217;s thread stuff ! as far as I knew Zenoss use <a href="http://twistedmatrix.com/">Twisted</a> framework and this error just happened for sql daemon so I reviewed the way that we had installed the packahe</p>  <p>For using this package you need to follow these steps </p>  <p><code>    /usr/local/zenoss/python/bin/easy_install pyodbc    apt-get install odbc-postgresq    apt-get install unixodbc-dev    </code></p>  <p>And edit /etc/odbcinst.ini, here is the tricky part, if you follow unixodbc document, it recommends you to config like :</p>  <p><code>    [PostgreSQL] Description     = PostgreSQL ODBC driver (Unicode version) Driver          = /usr/lib/odbc/psqlodbca.so Setup           = /usr/lib/odbc/libodbcpsqlS.so    </code></p>  <p>But you need to add an other line which is specifying number of Threads </p>  <p>  </p><p><code>    [PostgreSQL] Description     = PostgreSQL ODBC driver (Unicode version) Driver          = /usr/lib/odbc/psqlodbca.so Setup           = /usr/lib/odbc/libodbcpsqlS.so Threading = 2    </code></p>  <p> </p>  <p>After adding Threading line I never face that problem, I dunno why Twisted which is built as asynchronous framework can not handle this and we need to limit ODBC&#8217;s Thread.</p>  <p> </p>  <p><strong>UPDATE :</strong></p>  <p>I found another blog that he faced same problem and he explains the reason (<a href="http://hynek.me/blog/2011/04/twisted-sybase/">see more</a>)</p>  <p>  </p></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When You Are Not Free Even to Do Rm -rf / !]]></title>
    <link href="http://slashmili.org/blog/2011/03/06/when-you-are-not-free-even-to-do-rm-rf/"/>
    <updated>2011-03-06T00:00:00+08:00</updated>
    <id>http://slashmili.org/blog/2011/03/06/when-you-are-not-free-even-to-do-rm-rf</id>
    <content type="html"><![CDATA[<div class='post'>
<div class='posterous_autopost'><p>How much it is painful that you can&#8217;t do rm -rf / in your machine !</p>  <p>when I did rm I got this error :</p>  <p><span style="font-size: x-small;">rm: cannot remove root directory `/&#8217; </span></p>  <p>In past great responsibility brought great power but this days you are not free.</p>  <p>&nbsp;</p>  <p>Cheers for past that you can do every thing you want !</p>  <p>&nbsp;</p></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matching List and Map in Scala]]></title>
    <link href="http://slashmili.org/blog/2011/03/06/matching-list-and-map-in-scala/"/>
    <updated>2011-03-06T00:00:00+08:00</updated>
    <id>http://slashmili.org/blog/2011/03/06/matching-list-and-map-in-scala</id>
    <content type="html"><![CDATA[<div class='post'>
<div class='posterous_autopost'><p>For a while that I&#8217;ve been reading Scala I find it as a strong and powerfull language which helps you to write your application perfectly, it&#8217;s not like Java that ties you to follow some&nbsp;arid rules and it&#8217;s not like PHP that let you screw in your application(of course you can handle your code in PHP). Programing in Scala is fun as programming Python and it&#8217;s powerful as Java!</p>  <p>Scala&#8217;s Match syntax is liitle like Switch-Case but you can match value, type, regex, special type of class and more.&nbsp;</p>  <p>Here is a syntax of matching for List and map in Scala, for finding these codes I search a lot to ! so I wrote these samples for future usage.&nbsp;</p>  <p><code>    val foobar = Map("foo"-&gt;"bar")    foobar&nbsp;match {&nbsp;    &nbsp;&nbsp;case map :&nbsp;&nbsp;scala.collection.Map[_, _] =&gt; println(map)    }    </code></p>  <p>&nbsp;</p>  <p><code>    val foobar = List("foo","bar")    foobar&nbsp;match {&nbsp;    &nbsp;&nbsp;case &nbsp;list:Seq[_] =&gt; println(list)    }    </code></p>  <p>&nbsp;</p>  <p>So maybe you ask that why you need to handle something like this ?</p>  <p>It&#8217;s real world senario: I wanna to pass mix value of Map and List and String to function and get JSON string from that. some thing like this :</p>  <p><code>    def toJson(ob: Any):String = {    &nbsp;&nbsp;ob match {    &nbsp;&nbsp; &nbsp;case s : String&nbsp;&nbsp; =&gt; return "\""+ s + "\""    &nbsp;&nbsp;&nbsp; case d:Double&nbsp;&nbsp; =&gt; return "\""+ d.toString + "\""    &nbsp;&nbsp;&nbsp; case map:scala.collection.Map[_, _] =&gt; return "{" + ((for((k,v) &lt;- map) yield toJson(k) + ":" + toJson(v) ).reduceLeft(_ + ", " + _) ) + "}"    &nbsp;&nbsp;&nbsp; case list @ List(_*)&nbsp;&nbsp; =&gt; return "[" + ((for (m&lt;-list) yield toJson(m)).reduceLeft(_ + ", " + _) )&nbsp;&nbsp; + "]"    }    </code></p>  <p>Mabye last code doesn&#8217;t work probably ! because I write it to just show you how you can use this feature</p></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yet Another Programming Language : Scala]]></title>
    <link href="http://slashmili.org/blog/2010/12/15/yet-another-programming-language-scala/"/>
    <updated>2010-12-15T00:00:00+08:00</updated>
    <id>http://slashmili.org/blog/2010/12/15/yet-another-programming-language-scala</id>
    <content type="html"><![CDATA[<div class='post'>
WTF !<div>Every day you wake up, you hear new language is growing in town. after that language becomes mature, you fill unstable in your current position. </div><div><br /></div><div>You think why they ever think about another language while there are bunch of languages out ?you think there is many languages still waiting in your TODO list which you want try so how can you skip them and try this new guy !</div><div><br /></div><div>Anyway I am going to interest in this one : Scala ! </div><div><br /></div><div>My first reason is <a href="http://www.blogger.com/www.rememberthemilk.com">Remember The Milk</a>. I am actually in love with this app.</div><div>Second one is, it smells Java! I don&#8217;t like Java to much because of it&#8217;s complexity but Scala give me power of Java.</div><div><br /></div><div>In my new job, I should learn more about Perl so this year will be funniest year in my life.</div><div> Fight between obsolescence and adolescent.</div><div><br /></div><div>Let&#8217;s who will win !</div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Setup Blogger Custom Domain With BIND]]></title>
    <link href="http://slashmili.org/blog/2010/10/21/how-to-setup-blogger-custom-domain-with/"/>
    <updated>2010-10-21T00:00:00+08:00</updated>
    <id>http://slashmili.org/blog/2010/10/21/how-to-setup-blogger-custom-domain-with</id>
    <content type="html"><![CDATA[<div class='post'>
<div>Just for record in history !</div>1. You need to go in your blogger Setting->Publishing, click on custom domain, add your domain (with subdomain ) and save settings.<div><br /></div><div>2. Connect ssh to your BIND server and create file /etc/bind/named.mydomain with this content :</div><div><div><span class="Apple-style-span" style="font-size: x-small;">$TTL    86400</span></div><div><span class="Apple-style-span" style="font-size: x-small;">@ IN      SOA     ns.here. root.here.  (</span></div><div><span class="Apple-style-span" style="font-size: x-small;">                                      2          ; Serial</span></div><div><span class="Apple-style-span" style="font-size: x-small;">                                      28800      ; Refresh</span></div><div><span class="Apple-style-span" style="font-size: x-small;">                                      14400      ; Retry</span></div><div><span class="Apple-style-span" style="font-size: x-small;">                                      604800     ; Expire - 1 week</span></div><div><span class="Apple-style-span" style="font-size: x-small;">                                      86400 )    ; Minimum</span></div><div><span class="Apple-style-span" style="font-size: x-small;"><br /></span></div><div><span class="Apple-style-span" style="font-size: x-small;">blog <span class="Apple-tab-span" style="white-space:pre"> </span>IN <span class="Apple-tab-span" style="white-space:pre"> </span>CNAME     ghs.google.com.  ; don&#8217;t remove  last dot</span></div><div><span class="Apple-style-span" style="font-size: medium;"><br /></span></div><div><span class="Apple-style-span"><span class="Apple-style-span" style="font-size: small;"></span></span></div><span><span>3. Open /etc/bind/named.conf.local and append these lines  :</span></span><div><span class="Apple-style-span" style="font-size: x-small;">zone &#8220;mydomain.org&#8221; IN {</span></div><div><span class="Apple-style-span" style="font-size: x-small;">        type master;</span></div><div><span class="Apple-style-span" style="font-size: x-small;">        file &#8220;/etc/bind/named.mydomain&#8221;;</span></div><div><span class="Apple-style-span" style="font-size: x-small;">        allow-update { none; };</span></div><div><span class="Apple-style-span" style="font-size: x-small;">};</span></div><div><span class="Apple-style-span" style="font-size: medium; "> </span></div></div><div><span class="Apple-style-span"><span class="Apple-style-span" style="font-size: small;"></span></span></div><span><span>4. Restart your bind server /etc/init.d/bind9 restart</span></span><div><span class="Apple-style-span" style="font-size: medium; "><br /></span></div><div><span class="Apple-style-span"><span class="Apple-style-span" style="font-size: small;"><span><span>5. Open your blog with web browser.</span></span></span></span></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drawing Cartoons and Comics for Dummies]]></title>
    <link href="http://slashmili.org/blog/2010/10/21/drawing-cartoons-and-comics-for-dummies/"/>
    <updated>2010-10-21T00:00:00+08:00</updated>
    <id>http://slashmili.org/blog/2010/10/21/drawing-cartoons-and-comics-for-dummies</id>
    <content type="html"><![CDATA[<div class='post'>
<a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://media.wiley.com/product_data/coverImage/37/04704268/0470426837.jpg"><img style="float:left; margin:0 10px 10px 0;cursor:pointer; cursor:hand;width: 100px; height: 127px;" src="http://media.wiley.com/product_data/coverImage/37/04704268/0470426837.jpg" border="0" alt="" /></a>After 8 years it&#8217;s my second time which I try to learn drawing cartoons.<div>I found <a href="http://tinyurl.com/372qlak">this book</a> useful but part 1 of book is so boring!</div><div>Beginning of part 2 makes you little move, learns you how to draw head,neck,under body,objects and at the end of this part shows you how to draw Editorial cartoons (political cartoons)</div><div>In next part learns you about assembling what you learnt until now, tries to give you views about perspective, learns some hints about using letters in your cartoons and in last chapter of this part helps you use correct layout and background for your cartoons.</div><div>Part 4 talks about how to enhance your cartoon in Photoshop and part 5 has hints for you if you wana be a real cartoonist </div><div><br /></div><div>Overall I like the book, currently  read until beginning of chapter 6 and you can see my first cartoons :</div><div><br /></div><div><a href="http://2.bp.blogspot.com/_Oway9MdaY9E/TMA4LF631mI/AAAAAAAAAVY/ePpKroGiOA4/s1600/IMG_0026.JPG"><img src="http://2.bp.blogspot.com/_Oway9MdaY9E/TMA4LF631mI/AAAAAAAAAVY/ePpKroGiOA4/s200/IMG_0026.JPG" border="0" alt="" id="BLOGGER_PHOTO_ID_5530482105629791842" style="cursor: pointer; width: 200px; height: 150px; " /></a></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP AGI Is So Slow]]></title>
    <link href="http://slashmili.org/blog/2010/04/13/php-agi-is-so-slow/"/>
    <updated>2010-04-13T00:00:00+08:00</updated>
    <id>http://slashmili.org/blog/2010/04/13/php-agi-is-so-slow</id>
    <content type="html"><![CDATA[<div class='post'>
In one case exactly in our customer&#8217;s server, AGI which I wrote it was so slow !<br />I checked line by line of codes but it was hooked in some line of code. because <a href="http://www.parspooyesh.com/">we</a> are pythonic company, immediately I want from team to rewrite that code with python ! (python AGI is more better that PHP ones)<br /><br />A few days ago on that server , tail of syslog was opened and suddenly another PHP AGI run and I saw bunch of error in syslog which said that you didn&#8217;t set TimeZone in php.ini !<br /><br />And bingo! I guess problem is here, I add TimeZone in php.ini and AGI works fine !</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SIP Channel Stuck on Asterisk]]></title>
    <link href="http://slashmili.org/blog/2010/01/30/sip-channel-stuck-on-asterisk/"/>
    <updated>2010-01-30T00:00:00+08:00</updated>
    <id>http://slashmili.org/blog/2010/01/30/sip-channel-stuck-on-asterisk</id>
    <content type="html"><![CDATA[<div class='post'>
In some case we need to set call-limit=1 in sip config but after a while a SIP channel stuck and we got problem on sending new call to that SIP number.<br />Logger save this error :<br />&#8220;Call from peer XXX rejected due to usage limit of 1&#8221;<br /><span style="font-size:85%;">Asterisk*CLI> sip show channels<br />172.16.35.20     111         1e436b221c0  00102/00000  0x0 (nothing)    No  (d)  Tx: ACK                   </span><br /><br />Even when turn of that SIP, we got that error !<br />I always try to fixed that but every time this event happen we forced to fix this problem.<br /><br />Now it seems this problem solved in Asterisk 1.4.26 !<br />If you have problem like me check new version of asterisk</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MusicOnHold Is Choppy in Asterisk]]></title>
    <link href="http://slashmili.org/blog/2010/01/27/musiconhold-is-choppy-in-asterisk/"/>
    <updated>2010-01-27T00:00:00+08:00</updated>
    <id>http://slashmili.org/blog/2010/01/27/musiconhold-is-choppy-in-asterisk</id>
    <content type="html"><![CDATA[<div class='post'>
Sometimes after you setup your Asterisk system maybe you hear MOH-Music so choppy.<br /><br />Solutions which I test and solved problems are :<br /><ol><li>check your Zaptel  and especially module ztdummy (you can use <a href="http://tinyurl.com/ye2gb5g">this guide</a>)</li><li>check you VoiceGateway <span style="font-weight: bold;">VAD</span> (Voice Activity Detection) config and <span style="font-weight: bold;">Disabled it</span> !  you can follow my samples for Cisco AS5300 and Quintum Tenor<br /></li></ol><span style="font-weight: bold;">VAD Configurations : </span><br />1. Cisco AS5300 :<br /><ol><li>Login to your Cisco<br /></li><li>Type : &#8220;conf terminal&#8221;</li><li>Enter your voip dial peer : &#8220;dial-peer voice 200 voip&#8221; (200 is my dial-peer, yours maybe is something else )</li><li>Type : &#8220;no vad&#8221;</li><li>Press Ctr+C</li><li>write your configuration by typing write command : &#8221; write&#8221;</li></ol>2.  Quintum Tenor<br /><ol><li>Login to your Tenor</li><li>Type: &#8220;config&#8221;</li><li>Type : &#8220;IPRoutingGroup&#8221; (depends on your config maybe need to add a number after this command )</li><li>Type : &#8220;set VADEnable 0&#8221;</li><li>Save your config with command : &#8220;Submit&#8221;<br /></li></ol></div>
]]></content>
  </entry>
  
</feed>
