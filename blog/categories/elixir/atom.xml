<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Elixir | /mili]]></title>
  <link href="http://slashmili.org/blog/categories/elixir/atom.xml" rel="self"/>
  <link href="http://slashmili.org/"/>
  <updated>2016-03-13T22:31:19+08:00</updated>
  <id>http://slashmili.org/</id>
  <author>
    <name><![CDATA[Milad Rastian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Error Handling, the Elixir Way]]></title>
    <link href="http://slashmili.org/blog/2016/03/11/error-handling-the-elixir-way/"/>
    <updated>2016-03-11T17:39:00+08:00</updated>
    <id>http://slashmili.org/blog/2016/03/11/error-handling-the-elixir-way</id>
    <content type="html"><![CDATA[<p>When you start learning Elixir, the first you&rsquo;ll learn is the culture of <code>let it crash</code>.
Which sounds great! It measn that you don&rsquo;t need to handle exceptions and the system heal itself
, it&rsquo;s to easy to fall in to trap of not catching any exception like I did.</p>

<!-- more -->


<p>After your application is ready to go live,
you&rsquo;ll understand that not every thing should crash. Consider this example from
<a href="https://github.com/slashmili/elide/">Elide</a> project and the <a href="https://github.com/slashmili/elide/pull/8">changes</a>
I&rsquo;ve made to handle exceptions.</p>

<p>Elide project is a url shortener service, that I&rsquo;m using to experiment with Elixir and Phoenix.
I&rsquo;m using <a href="https://hex.pm/packages/hashids">hashids</a> to generate the short urls and later when people
use short urls I use the same library to decode a short url to meaning full data that I have in the app,
all simple simple stuff. However while I was developing, I followed my own understanding of <code>let it crash</code>
which was to never handle any unexpected behaviour.</p>

<p>Consider simplified version of getting a short url entity:</p>

<p>```elixir
defmodule Elide.ElinkServer
  alias Elide.{Repo, Elink}</p>

<p>  def get_elink(slug) do</p>

<pre><code>slug
|&gt; by_slug
|&gt; Repo.one
</code></pre>

<p>  end</p>

<p>  defp by_slug(my_slug) do</p>

<pre><code>elink_seq = get_details_by_slug(my_slug)
from e in Elink,
  where: e.elink_seq == ^elink_seq
</code></pre>

<p>  end</p>

<p>  defp get_details_by_slug(my_slug) do</p>

<pre><code>s = Hashids.new(min_len: 1, salt: salt)
{:ok, [elink_seq]} = Hashids.decode(s, my_slug)
elink_seq
</code></pre>

<p>  end
end
```</p>

<p>The code looks simple and I thought if someone wants to open an invalid short url,
well I <code>let it crash</code>!</p>

<p>As soon as I had the project on the production server I noticed that:</p>

<ul>
<li>If any users enters an invalid short url, they&rsquo;ll face an ugly page with error <code>Server internal error</code></li>
<li>I am getting a lot of false alarms on <a href="http://honeybadger.io">honeybadger</a> from bots on the internet,
they don&rsquo;t care that I don&rsquo;t handle corner cases, they just hit the web server with invalid urls</li>
</ul>


<p>To be honest I knew I should handle this case and I postponed it.</p>

<p>So what are the options? How can I handle it in elixir in a decent way</p>

<ul>
<li>Returning nil on case of failure. Nah, I certainly don&rsquo;t like this one.
How can I know what was the error in the first place if I only return nil.</li>
<li>Using <code>try/catch</code>, yeah it does the job but doesn&rsquo;t look decent. Generally I don&rsquo;t like the codes that are guarded with exceptions.
If I don&rsquo;t have any option, sure but there should be a better way in Elixir and Erlang.</li>
<li>Returning a tuple of <code>{:ok, result}</code> in case of success and <code>{:error, reason}</code> in case of failure.
I&rsquo;ve seen this one I was using <a href="http://elixir-lang.org/docs/stable/elixir/File.html">File</a> module.
Looks like that is convention that people are following in Erlang and Elixir.</li>
</ul>


<p>The idea behind using using tuple as opposed to using <code>try/catch</code> is we shouldn&rsquo;t use errors as control flow
(<a href="http://elixir-lang.org/getting-started/try-catch-and-rescue.html">read more</a>).
If a short url doesn&rsquo;t exist in database because a bot requested a random url should be considered as
an invalid data and treated as invalid data. Let&rsquo;s how can we refactor this code to handle invalid data in Elixir way:</p>

<p>```elixir
defmodule Elide.ElinkServer
  alias Elide.{Repo, Elink}</p>

<p>  def get_elink(slug) do</p>

<pre><code>slug
|&gt; by_slug
|&gt; fetch_one
</code></pre>

<p>  end</p>

<p>  defp fetch_one({:error, _} = error), do: error
  defp fetch_one({:ok, query}) = {:ok, Repo.one(query)}</p>

<p>  defp by_slug(my_slug) do</p>

<pre><code>case get_details_by_slug(my_slug) do
  {:error, _} = error -&gt; error
  {:ok, elink_seq} -&gt;
    {:ok, from e in Elink,
      where: e.elink_seq == ^elink_seq}
</code></pre>

<p>  end</p>

<p>  defp get_details_by_slug(my_slug) do</p>

<pre><code>s = Hashids.new(min_len: 1, salt: salt)
case Hashids.decode(s, my_slug) do
    {:ok, [elink_seq]} -&gt; {:ok, elink_seq}
    _ -&gt; {:error, :failed_to_decode}
end
</code></pre>

<p>  end
end
```</p>

<p>Does it worth it? I believe so with this approach I can simply pattern match the return value and keep the <code>flow</code> going.
For example my controller would look like:</p>

<p>```elixir
  def go(conn, %{&ldquo;slug&rdquo; => slug}) do</p>

<pre><code>slug
|&gt; ElinkServer.get_elink
|&gt; redirect_to_url(conn)
</code></pre>

<p>  end</p>

<p>  defp redirect_to_url({:error, _}, conn) do</p>

<pre><code>conn
|&gt; put_status(404)
|&gt; render(Elide.ErrorView, "404.html")
|&gt; halt
</code></pre>

<p>  end</p>

<p>  defp redirect_to_url({:ok, elink}, conn) do</p>

<pre><code>url = elink.urls |&gt; Enum.shuffle |&gt; List.first
conn
|&gt; inc_stat(elink)
|&gt; redirect(external: url.link)
|&gt; halt
</code></pre>

<p>  end
```</p>

<p>I could have just used <code>try/catch</code> in <code>go</code> function and call it done but I certainly like this code much better!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir]]></title>
    <link href="http://slashmili.org/blog/2016/02/06/elixir/"/>
    <updated>2016-02-06T09:33:00+08:00</updated>
    <id>http://slashmili.org/blog/2016/02/06/elixir</id>
    <content type="html"><![CDATA[<p>It was almost a year ago that I got introduced to <a href="http://elixir-lang.org">Elixir</a>.
I remember my first impression was yet another language on top of another one.
In addition running a software on <a href="http://www.erlang.org/">Erlang/OTP</a>, it&rsquo;s totally different beast
and I was a bit skeptical about it. However I gave it a chance and after a year,
I&rsquo;m totally happy with the time I spend and
I believe that everyone should take advantage of the language and the platform that is running on.</p>

<!-- more -->


<h2>Why Elixir?</h2>

<h3>Eloquent &amp; Expressive</h3>

<p><code>elixir
urls = ["http://google.com", "http://trello.com"]
random_url = urls |&gt; Enum.shuffle |&gt; List.first
</code></p>

<p>Do I need to explain the code? Don&rsquo;t think so!
And if you have a bit of unix background this code should make sense to you.</p>

<blockquote><p><small>Yes, there is an easy way to get random item, the above code is just for making the point.</small></p></blockquote>

<p>BTW did I tell you Elixir is a functional programming language?
If you are not familiar with functional programming, it might take sometime to get to use
to that, after you un-learn your OOP skills, you&rsquo;ll find that every thing make sense in Elixir land.</p>

<h3>Mature Environment</h3>

<p>Elixir comes with tools that help you to develop and build your project:</p>

<ul>
<li><a href="http://elixir-lang.org/docs/stable/mix/Mix.html">Mix</a> is a build tool to run your tasks.</li>
<li><a href="https://hex.pm/">Hex</a> is a package manager that is done right.</li>
<li><a href="http://elixir-lang.org/docs/stable/ex_unit/ExUnit.html">ExUnit</a> is your unit testing framework.</li>
<li><a href="https://github.com/elixir-lang/ex_doc">ExDoc</a> generates documentation for your Elixir projects.</li>
</ul>


<p>Also Elixir runs on <a href="https://www.erlang.org/">Erlang Virtual Machine(BEAM)</a> which has been <a href="https://www.quora.com/Which-companies-use-the-Erlang-language">around us</a> for quite some time.</p>

<h3>Metaprogramming</h3>

<p>Whenever I&rsquo;m learning a new language, after I get enough familiar with the language and it&rsquo;s syntax the first thing
I&rsquo;m looking for is how can I write a code that writes code for me!</p>

<p>The way that elixir does that is quite interesting.
Elixir&rsquo;s <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">AST</a> can be represented by Elixir&rsquo;s own data
structures. Having the AST accessible by normal Elixir code lets you do very powerful
things because you can operate at the level typically reserved only for compilers and language designers.</p>

<p>Let&rsquo;s say you want to humanize a mathematical equation, the interface and output should be like this:</p>

<p><code>elixir
iex &gt; Math.say 1 + 2
1 plus 2 is 3
3
iex &gt; Math.say 5 + 7
5 plus 7 is 12
12
</code></p>

<p>To achieve that we need to write a <code>macro</code> that matches with AST of <code>1 + 2</code>.
Thanks to Elixir&rsquo;s <code>quote</code> function it&rsquo;s easy to find out how it looks like:</p>

<p><code>elixir
iex &gt; quote do: 1 + 2
{:+, [context: Elixir, import: Kernel], [1, 2]}
</code></p>

<p>Now that we know how <code>1 + 2</code> is represented in Elixir&rsquo;s format we can write a <code>defmacro</code> that
matches with that data:</p>

<p>```elixir
defmodule Math do
  defmacro say({:+, _, [lhs, rhs]}) do</p>

<pre><code>quote do
  lhs = unquote lhs
  rhs = unquote rhs
  result = lhs + rhs
  IO.puts "#{lhs} plus #{rhs} is #{result}"
  result
end
</code></pre>

<p>  end
end
```</p>

<p>You can read more about macros in
<a href="https://pragprog.com/book/cmelixir/metaprogramming-elixir">Metaprogramming Elixir</a> book.</p>

<blockquote><p><small>this example is from the same book</small></p></blockquote>

<p>I have to mention that
<a href="http://elixir-lang.org/docs/master/elixir/Kernel.html#if/2">if</a> and most of the Elixir&rsquo;s keywords
are implemented as a <code>macro</code>.</p>

<h3>Concurrent</h3>

<p>Having a concurrent system in Elixir is inevitable. In addition because the data
are immutable you don&rsquo;t need to worry about concurrent processes stepping on each others toes.
Elixir achieves that by running on top of BEAM.</p>

<p>How does it work? Let&rsquo;s say you want run a few queries and send the results back to the user</p>

<p><code>elixir
iex &gt; run_query = fn (query) -&gt;
  1000
  |&gt; :random.uniform
  |&gt; :timer.sleep
  IO.inspect "query #{query} executed"
end
</code></p>

<blockquote><p><small> Not all the queries finish in the same time, to simulate that we sleep random amount of time</small></p></blockquote>

<p>It would be nice to run independent queries concurrently, let&rsquo;s try it in <code>iex</code>:</p>

<p>```elixir
iex > spawn(fn &ndash;> run_query.(&lsquo;select * from users&rsquo;) end)</p>

<h1>PID&lt;0.132.0></h1>

<p>iex > spawn(fn &ndash;> run_query.(&lsquo;select * from reports&rsquo;) end)</p>

<h1>PID&lt;0.134.0></h1>

<p>&ldquo;query select * from users executed&rdquo;
&ldquo;query select * from reports executed&rdquo;
```</p>

<p>As you can see both queries executed concurrently.</p>

<p>You might ask how can I get back the results and use them in the main process? The answer is <em>Message Passing</em>.</p>

<p>```elixir
iex > caller = self
iex > spawn(fn &ndash;> send(caller, {:query_result, run_query.(&lsquo;select * from reports&rsquo;)}) end)</p>

<h1>PID&lt;0.138.0></h1>

<p>&ldquo;query select * from reports executed&rdquo;
iex > receive do</p>

<pre><code>{:query_result, result} -&gt; IO.inspect "result is #{result}"
end
</code></pre>

<p>&ldquo;result is query select * from reports executed&rdquo;
&ldquo;result is query select * from reports executed&rdquo;
```</p>

<p>The processes in Elixir(it&rsquo;s not same as unix processes) can talk to each other through message.
Each process has it&rsquo;s own mailbox and can process one item at a time.</p>

<h3>Distributed</h3>

<p>I save the best for last.</p>

<p>Erlang and its BEAM was implemented to be run in distributed environment.
You can easily connect two Erlang nodes together:</p>

<p>Node1:
<code>elixir
$ iex --sname node1
iex(node1@localhost)&gt;
</code></p>

<p>Node2:
<code>elixir
$ iex --sname node2
iex(node2@localhost)&gt; Node.connect(:"node1@localhost")
iex(node2@localhost)&gt; Node.list
[:"node1@localhost"]
</code></p>

<p>After the nodes recognize each other,
you can run any piece of code in any node in the cluster.</p>

<p>Node2:
```elixir
iex(node2@localhost)> Node.spawn(
  :&ldquo;node1@localhost&rdquo;,
  fn &ndash;> IO.puts &ldquo;This code ran from #{node}&rdquo; end)
This code ran from node1@localhost</p>

<h1>PID&lt;8771.79.0></h1>

<p>```</p>

<p>It looks simple, isn&rsquo;t it? To be fair, building distributed application requires
more thought but hey at least the language and its environment are in your side!</p>

<h2>My experience</h2>

<p>Well I said why I like Elixir but learning a new language is challenging and it&rsquo;s get
more complicated if it&rsquo;s running under different environment(Erlang/OTP).</p>

<ul>
<li>I did struggle with the idea of immutable data but after a while I got use to that.</li>
<li>Elixir has a few Hash/List like data structures and few times I got confused to choose between them. It&rsquo;s getting better since Elixir is depreciating <code>HashDict</code>.</li>
<li>Building a concurrent, fault-tolerant system under BEAM requires knowledge about OTP framework(<a href="https://www.manning.com/books/elixir-in-action">Elixir in Action</a> can help you a lot).</li>
<li>Even though Elixir code runs under the VM, the development cycle is fast! Mix and Hex are doing great job, the dependencies are downloaded and compiled very fast. I can fire up <code>iex</code> console or run <code>mix test</code> and quickly get the result back.</li>
</ul>


<h2>Where to start</h2>

<p>Are you interested? Spending most of my time reading Elixir/Erlang related book I can give you some suggestions</p>

<ul>
<li><a href="https://pragprog.com/book/elixir12/programming-elixir-1-2">Programming Elixir</a>
This book helps you to get familiar with the language and master it.</li>
<li><a href="https://www.manning.com/books/elixir-in-action">Elixir in Action</a>
You&rsquo;ve read <em>Programming Elixir</em> but still have lot of questions about using OTP? This book is for you.</li>
<li><a href="https://pragprog.com/book/phoenix/programming-phoenix">Programming Phoenix</a>
Are you ready to write your first app in Elixir? If it&rsquo;s a web app you can use Phoenix.</li>
<li><a href="https://pragprog.com/book/cmelixir/metaprogramming-elixir">Metaprogramming Elixir</a>
You&rsquo;ve built your first app in Phoenix but wondering how Phoenix does all of those tricks? It&rsquo;s time to level up and become master in Elixir Metaprogramming by reading this book.</li>
</ul>

]]></content>
  </entry>
  
</feed>
